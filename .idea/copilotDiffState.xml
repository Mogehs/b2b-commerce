<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/app/components/buyer-dashboard/Home.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/components/buyer-dashboard/Home.jsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import {&#10;  Loader2,&#10;  MessageCircle,&#10;  Heart,&#10;  Star,&#10;  FileText,&#10;  Clock,&#10;  Users,&#10;} from &quot;lucide-react&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;&#10;// Import socket hook if you have one, or we'll create inline socket logic&#10;// import { useSocket } from &quot;@/app/context/SocketContext&quot;;&#10;&#10;const cards = [&#10;  {&#10;    title: &quot;Messages&quot;,&#10;    subtitle: &quot;New Messages&quot;,&#10;    highlight: true,&#10;    link: &quot;Message&quot;,&#10;    icon: MessageCircle,&#10;    color: &quot;from-[#C9AF2F] to-[#B8A028]&quot;,&#10;  },&#10;  {&#10;    title: &quot;Favourite Products&quot;,&#10;    link: &quot;Favourite&quot;,&#10;    icon: Heart,&#10;    color: &quot;from-red-500 to-red-600&quot;,&#10;  },&#10;  {&#10;    title: &quot;Favourite Supplier&quot;,&#10;    link: &quot;Favourite&quot;,&#10;    icon: Users,&#10;    color: &quot;from-blue-500 to-blue-600&quot;,&#10;  },&#10;  // {&#10;  //   title: &quot;My Reviews&quot;,&#10;  //   link: &quot;Reviews&quot;,&#10;  //   icon: Star,&#10;  //   color: &quot;from-yellow-500 to-yellow-600&quot;,&#10;  // },&#10;  {&#10;    title: &quot;My RFQ&quot;,&#10;    link: &quot;My RFQ&quot;,&#10;    icon: FileText,&#10;    color: &quot;from-purple-500 to-purple-600&quot;,&#10;  },&#10;  // {&#10;  //   title: &quot;My History&quot;,&#10;  //   link: &quot;History&quot;,&#10;  //   icon: Clock,&#10;  //   color: &quot;from-green-500 to-green-600&quot;,&#10;  // },&#10;];&#10;&#10;export default function Dashboard({ activeTab }) {&#10;  const { data: session, status } = useSession();&#10;  const [profile, setProfile] = useState(null);&#10;  const [conversations, setConversations] = useState([]);&#10;  const [unreadCount, setUnreadCount] = useState(0);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;  const [socket, setSocket] = useState(null);&#10;&#10;  // Socket connection for real-time updates&#10;  useEffect(() =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    const initSocket = async () =&gt; {&#10;      const { io } = await import(&quot;socket.io-client&quot;);&#10;      const socketUrl =&#10;        process.env.NEXT_PUBLIC_SOCKET_URL || window.location.origin;&#10;&#10;      const socketInstance = io(socketUrl, {&#10;        withCredentials: true,&#10;        transports: [&quot;websocket&quot;, &quot;polling&quot;],&#10;      });&#10;&#10;      socketInstance.on(&quot;connect&quot;, () =&gt; {&#10;        console.log(&quot;Connected to socket server&quot;);&#10;        // Join user's room for personal notifications&#10;        socketInstance.emit(&quot;join-user-room&quot;, session.user.id);&#10;      });&#10;&#10;      socketInstance.on(&quot;new-message&quot;, (data) =&gt; {&#10;        console.log(&quot;New message received:&quot;, data);&#10;        // Show toast notification for new message&#10;        toast.success(`New message from ${data.senderName || &quot;someone&quot;}`, {&#10;          description:&#10;            data.content?.length &gt; 50&#10;              ? data.content.substring(0, 50) + &quot;...&quot;&#10;              : data.content,&#10;          action: {&#10;            label: &quot;View&quot;,&#10;            onClick: () =&gt; activeTab(&quot;Message&quot;),&#10;          },&#10;        });&#10;        // Update conversations and unread count&#10;        fetchConversations();&#10;      });&#10;&#10;      socketInstance.on(&quot;message-read&quot;, (data) =&gt; {&#10;        console.log(&quot;Message read:&quot;, data);&#10;        // Update read status&#10;        fetchConversations();&#10;      });&#10;&#10;      setSocket(socketInstance);&#10;&#10;      return () =&gt; {&#10;        socketInstance.disconnect();&#10;      };&#10;    };&#10;&#10;    initSocket();&#10;  }, [session]);&#10;&#10;  const fetchConversations = async () =&gt; {&#10;    try {&#10;      const conversationsResponse = await fetch(&quot;/api/conversations&quot;);&#10;      if (conversationsResponse.ok) {&#10;        const conversationsData = await conversationsResponse.json();&#10;        setConversations(conversationsData.conversations || []);&#10;&#10;        // Calculate total unread messages count&#10;        const unread =&#10;          conversationsData.conversations?.reduce((total, conv) =&gt; {&#10;            return total + (conv.unreadCount || 0);&#10;          }, 0) || 0;&#10;        setUnreadCount(unread);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching conversations:&quot;, error);&#10;    }&#10;  };&#10;&#10;  const formatMembershipDuration = (createdAt) =&gt; {&#10;    if (!createdAt) return &quot;Recently joined&quot;;&#10;&#10;    const joinDate = new Date(createdAt);&#10;    const now = new Date();&#10;&#10;    const months =&#10;      (now.getFullYear() - joinDate.getFullYear()) * 12 +&#10;      (now.getMonth() - joinDate.getMonth());&#10;&#10;    const years = Math.floor(months / 12);&#10;    const remainingMonths = months % 12;&#10;&#10;    const monthText = joinDate.toLocaleString(&quot;default&quot;, { month: &quot;long&quot; });&#10;    const yearText = joinDate.getFullYear();&#10;&#10;    let duration = &quot;&quot;;&#10;    if (years &gt; 0) {&#10;      duration += `${years}y`;&#10;      if (remainingMonths &gt; 0) duration += ` - ${remainingMonths}m`;&#10;    } else if (months &gt; 0) {&#10;      duration += `${remainingMonths}m`;&#10;    } else {&#10;      duration += &quot;&lt; 1m&quot;;&#10;    }&#10;&#10;    return `Member Since ${monthText}, ${yearText} (${duration})`;&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchUserProfile = async () =&gt; {&#10;      if (status === &quot;authenticated&quot;) {&#10;        try {&#10;          setLoading(true);&#10;&#10;          // Fetch user profile&#10;          const profileResponse = await fetch(&quot;/api/user/profile&quot;);&#10;          if (!profileResponse.ok) {&#10;            throw new Error(&quot;Failed to fetch profile&quot;);&#10;          }&#10;          const profileData = await profileResponse.json();&#10;          setProfile(profileData.user);&#10;&#10;          // Fetch conversations&#10;          await fetchConversations();&#10;        } catch (err) {&#10;          console.error(&quot;Error fetching data:&quot;, err);&#10;          setError(err.message);&#10;        } finally {&#10;          setLoading(false);&#10;        }&#10;      }&#10;    };&#10;&#10;    fetchUserProfile();&#10;  }, [status]);&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100&quot;&gt;&#10;        &lt;div className=&quot;text-center space-y-4&quot;&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;div className=&quot;w-16 h-16 border-4 border-[#C9AF2F]/20 border-t-[#C9AF2F] rounded-full animate-spin mx-auto&quot;&gt;&lt;/div&gt;&#10;            &lt;div className=&quot;w-12 h-12 border-4 border-[#B8A028]/20 border-t-[#B8A028] rounded-full animate-spin mx-auto absolute top-2 left-1/2 transform -translate-x-1/2&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-xl font-semibold text-gray-700&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100&quot;&gt;&#10;        &lt;div className=&quot;bg-white p-8 rounded-2xl shadow-lg border border-gray-100 text-center max-w-md&quot;&gt;&#10;          &lt;div className=&quot;w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4&quot;&gt;&#10;            &lt;svg&#10;              className=&quot;w-8 h-8 text-red-500&quot;&#10;              fill=&quot;none&quot;&#10;              stroke=&quot;currentColor&quot;&#10;              viewBox=&quot;0 0 24 24&quot;&#10;            &gt;&#10;              &lt;path&#10;                strokeLinecap=&quot;round&quot;&#10;                strokeLinejoin=&quot;round&quot;&#10;                strokeWidth=&quot;2&quot;&#10;                d=&quot;M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z&quot;&#10;              /&gt;&#10;            &lt;/svg&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-red-600 mb-2&quot;&gt;Error&lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600 mb-6&quot;&gt;{error}&lt;/p&gt;&#10;          &lt;button&#10;            onClick={() =&gt; window.location.reload()}&#10;            className=&quot;px-6 py-3 bg-gradient-to-r from-[#C9AF2F] to-[#B8A028] text-white rounded-full hover:from-[#B8A028] hover:to-[#A69124] transition-all duration-300 shadow-lg hover:shadow-xl transform hover:scale-105&quot;&#10;          &gt;&#10;            Try Again&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-[#F1F1F1] min-h-screen p-6&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto space-y-8&quot;&gt;&#10;        {/* Profile Info */}&#10;        &lt;div className=&quot;bg-white shadow-lg border border-[#ACAAAA] p-2 md:py-[1rem] md:px-[0.5rem] hover:shadow-xl transition-all duration-300&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col md:flex-row items-start md:items-center gap-6&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-3 mb-2&quot;&gt;&#10;                &lt;h2 className=&quot;md:text-[2rem] text-[1.25rem] font-bold text-[#000000]&quot;&gt;&#10;                  {profile?.name || session?.user?.name}&#10;                &lt;/h2&gt;&#10;                {/* &lt;span className=&quot;px-3 py-1 bg-gradient-to-r from-[#C9AF2F]/10 to-[#B8A028]/10 text-[#C9AF2F] rounded-full text-sm font-medium border border-[#C9AF2F]/20&quot;&gt;&#10;                  Buyer&#10;                &lt;/span&gt; */}&#10;              &lt;/div&gt;&#10;              {/* &lt;p className=&quot;text-lg text-gray-600 mb-1&quot;&gt;&#10;                {profile?.email || session?.user?.email}&#10;              &lt;/p&gt; */}&#10;              &lt;p className=&quot;md:text-[1.25rem] text-[#000000] inline-block&quot;&gt;&#10;                {formatMembershipDuration(&#10;                  profile?.createdAt || session?.user?.createdAt&#10;                )}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Dashboard Cards */}&#10;        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 md:gap-16 md:px-16 px-4&quot;&gt;&#10;          {cards.map((card, idx) =&gt; {&#10;            const Icon = card.icon;&#10;            const getCount = () =&gt; {&#10;              switch (idx) {&#10;                case 0:&#10;                  return conversations?.length || 0;&#10;                case 1:&#10;                  return profile?.favProducts?.length || 0;&#10;                case 2:&#10;                  return profile?.favSellers?.length || 0;&#10;                case 3:&#10;                  return profile?.reviews?.length || 0;&#10;                case 4:&#10;                  return profile?.rfqs?.length || 0;&#10;                case 5:&#10;                  return profile?.purchaseHistory?.length || 0;&#10;                default:&#10;                  return 0;&#10;              }&#10;            };&#10;&#10;            const count = getCount();&#10;            const showNotification = idx === 0 &amp;&amp; unreadCount &gt; 0;&#10;&#10;            return (&#10;              &lt;div&#10;                onClick={() =&gt; activeTab(card.link)}&#10;                key={idx}&#10;                className=&quot;group bg-white rounded-[0.625rem] shadow-lg border border-gray-100 py-[1rem] px-[0.5rem] cursor-pointer hover:shadow-xl transition-all duration-300 transform hover:scale-105 relative overflow-hidden&quot;&#10;              &gt;&#10;                {/* Background Gradient */}&#10;                {/* &lt;div&#10;                  className={`absolute top-0 right-0 w-24 h-24 bg-gradient-to-br ${card.color} opacity-5 rounded-full transform translate-x-8 -translate-y-8 group-hover:opacity-10 transition-opacity duration-300`}&#10;                &gt;&lt;/div&gt; */}&#10;&#10;                &lt;div className=&quot;relative z-10&quot;&gt;&#10;                  {/* &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;                    &lt;div&#10;                      className={`w-12 h-12 bg-gradient-to-r ${card.color} rounded-xl flex items-center justify-center shadow-lg`}&#10;                    &gt;&#10;                      &lt;Icon className=&quot;w-6 h-6 text-white&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    {showNotification &amp;&amp; (&#10;                      &lt;div className=&quot;relative&quot;&gt;&#10;                        &lt;div className=&quot;absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-pulse&quot;&gt;&lt;/div&gt;&#10;                        &lt;div className=&quot;bg-red-500 text-white text-xs px-2 py-1 rounded-full font-medium&quot;&gt;&#10;                          {unreadCount}&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt; */}&#10;&#10;                  &lt;h3 className=&quot;md:text-[1.25rem] text-[1rem] font-semibold text-gray-800 mb-2 group-hover:text-gray-900 transition-colors duration-200&quot;&gt;&#10;                    {card.title}&#10;                  &lt;/h3&gt;&#10;&#10;                  {showNotification &amp;&amp; (&#10;                    &lt;p className=&quot;text-sm text-red-600 font-medium mb-3&quot;&gt;&#10;                      {unreadCount} {card.subtitle}&#10;                    &lt;/p&gt;&#10;                  )}&#10;&#10;                  &lt;div className=&quot;flex items-center justify-end gap-1&quot;&gt;&#10;                    &lt;span className=&quot;md:text-[1.25rem] text-[1rem] text-black/50&quot;&gt;Total&lt;/span&gt;&#10;                    &lt;span className=&quot;md:text-[1.25rem] text-[1rem] text-black/50&quot;&gt;-&lt;/span&gt;&#10;                    &lt;span className=&quot;md:text-[1.25rem] text-[1rem] text-black/50&quot;&gt;&#10;                      {count}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;&#10;        {/* Recent Conversations Preview */}&#10;        {conversations.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;bg-white rounded-2xl shadow-lg border border-gray-100 p-6 hover:shadow-xl transition-all duration-300&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 bg-gradient-to-r from-[#C9AF2F] to-[#B8A028] rounded-lg flex items-center justify-center mr-3&quot;&gt;&#10;                  &lt;MessageCircle className=&quot;w-5 h-5 text-white&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;h3 className=&quot;text-xl font-semibold text-gray-800&quot;&gt;&#10;                  Recent Conversations&#10;                &lt;/h3&gt;&#10;              &lt;/div&gt;&#10;              &lt;button&#10;                onClick={() =&gt; activeTab(&quot;Message&quot;)}&#10;                className=&quot;text-[#C9AF2F] hover:text-[#B8A028] font-medium text-sm transition-colors duration-200&quot;&#10;              &gt;&#10;                View All&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {conversations.slice(0, 3).map((conversation, idx) =&gt; (&#10;                &lt;div&#10;                  key={conversation._id}&#10;                  className=&quot;flex items-center p-3 rounded-xl bg-gray-50/50 hover:bg-[#C9AF2F]/5 transition-all duration-200 cursor-pointer&quot;&#10;                &gt;&#10;                  &lt;div className=&quot;w-10 h-10 bg-gradient-to-r from-gray-400 to-gray-500 rounded-full flex items-center justify-center mr-3&quot;&gt;&#10;                    &lt;span className=&quot;text-white font-medium text-sm&quot;&gt;&#10;                      {conversation.participants?.[0]?.name?.charAt(0) || &quot;U&quot;}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-gray-800&quot;&gt;&#10;                      {conversation.participants?.[0]?.name || &quot;Unknown User&quot;}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-sm text-gray-500 truncate&quot;&gt;&#10;                      {conversation.lastMessage?.content || &quot;No messages yet&quot;}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-400&quot;&gt;&#10;                    {new Date(conversation.updatedAt).toLocaleDateString()}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useSession } from &quot;next-auth/react&quot;;&#10;import {&#10;  Loader2,&#10;  MessageCircle,&#10;  Heart,&#10;  Star,&#10;  FileText,&#10;  Clock,&#10;  Users,&#10;} from &quot;lucide-react&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;&#10;// Import socket hook if you have one, or we'll create inline socket logic&#10;// import { useSocket } from &quot;@/app/context/SocketContext&quot;;&#10;&#10;const cards = [&#10;  {&#10;    title: &quot;Messages&quot;,&#10;    subtitle: &quot;New Messages&quot;,&#10;    highlight: true,&#10;    link: &quot;Message&quot;,&#10;    icon: MessageCircle,&#10;    color: &quot;from-[#C9AF2F] to-[#B8A028]&quot;,&#10;  },&#10;  {&#10;    title: &quot;Favourite Products&quot;,&#10;    link: &quot;Favourite&quot;,&#10;    icon: Heart,&#10;    color: &quot;from-red-500 to-red-600&quot;,&#10;  },&#10;  {&#10;    title: &quot;Favourite Supplier&quot;,&#10;    link: &quot;Favourite&quot;,&#10;    icon: Users,&#10;    color: &quot;from-blue-500 to-blue-600&quot;,&#10;  },&#10;  // {&#10;  //   title: &quot;My Reviews&quot;,&#10;  //   link: &quot;Reviews&quot;,&#10;  //   icon: Star,&#10;  //   color: &quot;from-yellow-500 to-yellow-600&quot;,&#10;  // },&#10;  {&#10;    title: &quot;My RFQ&quot;,&#10;    link: &quot;My RFQ&quot;,&#10;    icon: FileText,&#10;    color: &quot;from-purple-500 to-purple-600&quot;,&#10;  },&#10;  // {&#10;  //   title: &quot;My History&quot;,&#10;  //   link: &quot;History&quot;,&#10;  //   icon: Clock,&#10;  //   color: &quot;from-green-500 to-green-600&quot;,&#10;  // },&#10;];&#10;&#10;export default function Dashboard({ activeTab }) {&#10;  const { data: session, status } = useSession();&#10;  const [profile, setProfile] = useState(null);&#10;  const [conversations, setConversations] = useState([]);&#10;  const [unreadCount, setUnreadCount] = useState(0);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState(null);&#10;  const [socket, setSocket] = useState(null);&#10;&#10;  // Socket connection for real-time updates&#10;  useEffect(() =&gt; {&#10;    if (!session?.user) return;&#10;&#10;    const initSocket = async () =&gt; {&#10;      const { io } = await import(&quot;socket.io-client&quot;);&#10;      const socketUrl =&#10;        process.env.NEXT_PUBLIC_SOCKET_URL || window.location.origin;&#10;&#10;      const socketInstance = io(socketUrl, {&#10;        withCredentials: true,&#10;        transports: [&quot;websocket&quot;, &quot;polling&quot;],&#10;      });&#10;&#10;      socketInstance.on(&quot;connect&quot;, () =&gt; {&#10;        console.log(&quot;Connected to socket server&quot;);&#10;        // Join user's room for personal notifications&#10;        socketInstance.emit(&quot;join-user-room&quot;, session.user.id);&#10;      });&#10;&#10;      socketInstance.on(&quot;new-message&quot;, (data) =&gt; {&#10;        console.log(&quot;New message received:&quot;, data);&#10;        // Show toast notification for new message&#10;        toast.success(`New message from ${data.senderName || &quot;someone&quot;}`, {&#10;          description:&#10;            data.content?.length &gt; 50&#10;              ? data.content.substring(0, 50) + &quot;...&quot;&#10;              : data.content,&#10;          action: {&#10;            label: &quot;View&quot;,&#10;            onClick: () =&gt; activeTab(&quot;Message&quot;),&#10;          },&#10;        });&#10;        // Update conversations and unread count&#10;        fetchConversations();&#10;      });&#10;&#10;      socketInstance.on(&quot;message-read&quot;, (data) =&gt; {&#10;        console.log(&quot;Message read:&quot;, data);&#10;        // Update read status&#10;        fetchConversations();&#10;      });&#10;&#10;      setSocket(socketInstance);&#10;&#10;      return () =&gt; {&#10;        socketInstance.disconnect();&#10;      };&#10;    };&#10;&#10;    initSocket();&#10;  }, [session]);&#10;&#10;  const fetchConversations = async () =&gt; {&#10;    try {&#10;      const conversationsResponse = await fetch(&quot;/api/conversations&quot;);&#10;      if (conversationsResponse.ok) {&#10;        const conversationsData = await conversationsResponse.json();&#10;        setConversations(conversationsData.conversations || []);&#10;&#10;        // Calculate total unread messages count&#10;        const unread =&#10;          conversationsData.conversations?.reduce((total, conv) =&gt; {&#10;            return total + (conv.unreadCount || 0);&#10;          }, 0) || 0;&#10;        setUnreadCount(unread);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching conversations:&quot;, error);&#10;    }&#10;  };&#10;&#10;  const formatMembershipDuration = (createdAt) =&gt; {&#10;    if (!createdAt) return &quot;Recently joined&quot;;&#10;&#10;    const joinDate = new Date(createdAt);&#10;    const now = new Date();&#10;&#10;    const months =&#10;      (now.getFullYear() - joinDate.getFullYear()) * 12 +&#10;      (now.getMonth() - joinDate.getMonth());&#10;&#10;    const years = Math.floor(months / 12);&#10;    const remainingMonths = months % 12;&#10;&#10;    const monthText = joinDate.toLocaleString(&quot;default&quot;, { month: &quot;long&quot; });&#10;    const yearText = joinDate.getFullYear();&#10;&#10;    let duration = &quot;&quot;;&#10;    if (years &gt; 0) {&#10;      duration += `${years}y`;&#10;      if (remainingMonths &gt; 0) duration += ` - ${remainingMonths}m`;&#10;    } else if (months &gt; 0) {&#10;      duration += `${remainingMonths}m`;&#10;    } else {&#10;      duration += &quot;&lt; 1m&quot;;&#10;    }&#10;&#10;    return `Member Since ${monthText}, ${yearText} (${duration})`;&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchUserProfile = async () =&gt; {&#10;      if (status === &quot;authenticated&quot;) {&#10;        try {&#10;          setLoading(true);&#10;&#10;          // Fetch user profile&#10;          const profileResponse = await fetch(&quot;/api/user/profile&quot;);&#10;          if (!profileResponse.ok) {&#10;            throw new Error(&quot;Failed to fetch profile&quot;);&#10;          }&#10;          const profileData = await profileResponse.json();&#10;          setProfile(profileData.user);&#10;&#10;          // Fetch conversations&#10;          await fetchConversations();&#10;        } catch (err) {&#10;          console.error(&quot;Error fetching data:&quot;, err);&#10;          setError(err.message);&#10;        } finally {&#10;          setLoading(false);&#10;        }&#10;      }&#10;    };&#10;&#10;    fetchUserProfile();&#10;  }, [status]);&#10;&#10;  if (status === &quot;loading&quot; || loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100&quot;&gt;&#10;        &lt;div className=&quot;text-center space-y-3&quot;&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;div className=&quot;w-12 h-12 border-3 border-[#C9AF2F]/20 border-t-[#C9AF2F] rounded-full animate-spin mx-auto&quot;&gt;&lt;/div&gt;&#10;            &lt;div className=&quot;w-9 h-9 border-3 border-[#B8A028]/20 border-t-[#B8A028] rounded-full animate-spin mx-auto absolute top-1.5 left-1/2 transform -translate-x-1/2&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-base font-semibold text-gray-700&quot;&gt;&#10;            Loading dashboard...&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100&quot;&gt;&#10;        &lt;div className=&quot;bg-white p-6 rounded-xl shadow-md border border-gray-100 text-center max-w-md&quot;&gt;&#10;          &lt;div className=&quot;w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-3&quot;&gt;&#10;            &lt;svg&#10;              className=&quot;w-6 h-6 text-red-500&quot;&#10;              fill=&quot;none&quot;&#10;              stroke=&quot;currentColor&quot;&#10;              viewBox=&quot;0 0 24 24&quot;&#10;            &gt;&#10;              &lt;path&#10;                strokeLinecap=&quot;round&quot;&#10;                strokeLinejoin=&quot;round&quot;&#10;                strokeWidth=&quot;2&quot;&#10;                d=&quot;M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z&quot;&#10;              /&gt;&#10;            &lt;/svg&gt;&#10;          &lt;/div&gt;&#10;          &lt;h2 className=&quot;text-xl font-bold text-red-600 mb-2&quot;&gt;Error&lt;/h2&gt;&#10;          &lt;p className=&quot;text-sm text-gray-600 mb-4&quot;&gt;{error}&lt;/p&gt;&#10;          &lt;button&#10;            onClick={() =&gt; window.location.reload()}&#10;            className=&quot;px-4 py-2 bg-gradient-to-r from-[#C9AF2F] to-[#B8A028] text-white rounded-full hover:from-[#B8A028] hover:to-[#A69124] transition-all duration-300 shadow-md hover:shadow-lg text-sm&quot;&#10;          &gt;&#10;            Try Again&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-[#F1F1F1] min-h-screen p-4 md:p-5&quot;&gt;&#10;      &lt;div className=&quot;max-w-7xl mx-auto space-y-6&quot;&gt;&#10;        {/* Profile Info */}&#10;        &lt;div className=&quot;bg-white shadow-md border border-[#ACAAAA] p-2 md:py-3 md:px-4 hover:shadow-lg transition-all duration-300&quot;&gt;&#10;          &lt;div className=&quot;flex flex-col md:flex-row items-start md:items-center gap-4&quot;&gt;&#10;            &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex items-center gap-2 mb-1&quot;&gt;&#10;                &lt;h2 className=&quot;md:text-lg text-base font-bold text-[#000000]&quot;&gt;&#10;                  {profile?.name || session?.user?.name}&#10;                &lt;/h2&gt;&#10;              &lt;/div&gt;&#10;              &lt;p className=&quot;md:text-sm text-xs text-[#000000] inline-block&quot;&gt;&#10;                {formatMembershipDuration(&#10;                  profile?.createdAt || session?.user?.createdAt&#10;                )}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Dashboard Cards */}&#10;        &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3 md:gap-6 md:px-8 px-2&quot;&gt;&#10;          {cards.map((card, idx) =&gt; {&#10;            const Icon = card.icon;&#10;            const getCount = () =&gt; {&#10;              switch (idx) {&#10;                case 0:&#10;                  return conversations?.length || 0;&#10;                case 1:&#10;                  return profile?.favProducts?.length || 0;&#10;                case 2:&#10;                  return profile?.favSellers?.length || 0;&#10;                case 3:&#10;                  return profile?.reviews?.length || 0;&#10;                case 4:&#10;                  return profile?.rfqs?.length || 0;&#10;                case 5:&#10;                  return profile?.purchaseHistory?.length || 0;&#10;                default:&#10;                  return 0;&#10;              }&#10;            };&#10;&#10;            const count = getCount();&#10;            const showNotification = idx === 0 &amp;&amp; unreadCount &gt; 0;&#10;&#10;            return (&#10;              &lt;div&#10;                onClick={() =&gt; activeTab(card.link)}&#10;                key={idx}&#10;                className=&quot;group bg-white rounded-md shadow-md border border-gray-100 py-3 px-3 cursor-pointer hover:shadow-lg transition-all duration-300 transform hover:scale-102 relative overflow-hidden&quot;&#10;              &gt;&#10;                &lt;div className=&quot;relative z-10&quot;&gt;&#10;                  &lt;h3 className=&quot;md:text-sm text-xs font-semibold text-gray-800 mb-2 group-hover:text-gray-900 transition-colors duration-200&quot;&gt;&#10;                    {card.title}&#10;                  &lt;/h3&gt;&#10;&#10;                  {showNotification &amp;&amp; (&#10;                    &lt;p className=&quot;text-xs text-red-600 font-medium mb-2&quot;&gt;&#10;                      {unreadCount} {card.subtitle}&#10;                    &lt;/p&gt;&#10;                  )}&#10;&#10;                  &lt;div className=&quot;flex items-center justify-end gap-1&quot;&gt;&#10;                    &lt;span className=&quot;md:text-sm text-xs text-black/50&quot;&gt;Total&lt;/span&gt;&#10;                    &lt;span className=&quot;md:text-sm text-xs text-black/50&quot;&gt;-&lt;/span&gt;&#10;                    &lt;span className=&quot;md:text-sm text-xs text-black/50&quot;&gt;&#10;                      {count}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;&#10;        {/* Recent Conversations Preview */}&#10;        {conversations.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;bg-white rounded-md shadow-md border border-gray-100 p-4 hover:shadow-lg transition-all duration-300&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center&quot;&gt;&#10;                &lt;div className=&quot;w-6 h-6 bg-gradient-to-r from-[#C9AF2F] to-[#B8A028] rounded-md flex items-center justify-center mr-2&quot;&gt;&#10;                  &lt;MessageCircle className=&quot;w-3 h-3 text-white&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;h3 className=&quot;text-sm font-semibold text-gray-800&quot;&gt;&#10;                  Recent Conversations&#10;                &lt;/h3&gt;&#10;              &lt;/div&gt;&#10;              &lt;button&#10;                onClick={() =&gt; activeTab(&quot;Message&quot;)}&#10;                className=&quot;text-[#C9AF2F] hover:text-[#B8A028] font-medium text-xs transition-colors duration-200&quot;&#10;              &gt;&#10;                View All&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;space-y-2&quot;&gt;&#10;              {conversations.slice(0, 3).map((conversation, idx) =&gt; (&#10;                &lt;div&#10;                  key={conversation._id}&#10;                  className=&quot;flex items-center p-2 rounded-md bg-gray-50/50 hover:bg-[#C9AF2F]/5 transition-all duration-200 cursor-pointer&quot;&#10;                &gt;&#10;                  &lt;div className=&quot;w-8 h-8 bg-gradient-to-r from-gray-400 to-gray-500 rounded-full flex items-center justify-center mr-2&quot;&gt;&#10;                    &lt;span className=&quot;text-white font-medium text-xs&quot;&gt;&#10;                      {conversation.participants?.[0]?.name?.charAt(0) || &quot;U&quot;}&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-xs text-gray-800&quot;&gt;&#10;                      {conversation.participants?.[0]?.name || &quot;Unknown User&quot;}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500 truncate&quot;&gt;&#10;                      {conversation.lastMessage?.content || &quot;No messages yet&quot;}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;text-[10px] text-gray-400&quot;&gt;&#10;                    {new Date(conversation.updatedAt).toLocaleDateString()}&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/layout.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/layout.js" />
              <option name="originalContent" value="import { Geist, Geist_Mono } from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;&#10;import { Toaster } from &quot;@/components/ui/sonner&quot;;&#10;import { authOptions } from &quot;@/auth&quot;;&#10;import { SessionProviderWrapper } from &quot;./lib/SessionProviderWrapper&quot;;&#10;import { getServerSession } from &quot;next-auth&quot;;&#10;import { SocketProvider } from &quot;./context/SocketContext&quot;;&#10;&#10;const geistSans = Geist({&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata = {&#10;  title: &quot;CommerceHub - B2B Marketplace&quot;,&#10;  description:&#10;    &quot;Your trusted B2B marketplace connecting buyers and sellers worldwide&quot;,&#10;  icons: {&#10;    icon: [&#10;      {&#10;        url: &quot;/logo.png&quot;,&#10;        sizes: &quot;32x32&quot;,&#10;        type: &quot;image/png&quot;,&#10;      },&#10;    ],&#10;    shortcut: &quot;/logo.png&quot;,&#10;    apple: &quot;/logo.png&quot;,&#10;  },&#10;};&#10;&#10;export default async function RootLayout({ children }) {&#10;  const session = await getServerSession(authOptions);&#10;  return (&#10;    &lt;html lang=&quot;en&quot;&gt;&#10;      &lt;head&gt;&#10;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;        &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot; /&gt;&#10;        &lt;meta&#10;          name=&quot;keywords&quot;&#10;          content=&quot;B2B, marketplace, commerce, buyers, sellers, wholesale, business&quot;&#10;        /&gt;&#10;        &lt;meta name=&quot;author&quot; content=&quot;CommerceHub&quot; /&gt;&#10;        &lt;link rel=&quot;icon&quot; href=&quot;/logo.png&quot; /&gt;&#10;        &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;/logo.png&quot; /&gt;&#10;        &lt;script&#10;          async&#10;          defer&#10;          src={`https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&amp;libraries=places&amp;loading=async&amp;callback=initMap`}&#10;        /&gt;&#10;        &lt;script&#10;          type=&quot;module&quot;&#10;          src=&quot;https://unpkg.com/@googlemaps/extended-component-library@0.6&quot;&#10;        /&gt;&#10;      &lt;/head&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased max-w-[1536px] mx-auto bg-[#F1F1F1]`}&#10;      &gt;&#10;        &lt;SessionProviderWrapper session={session}&gt;&#10;          &lt;SocketProvider&gt;{children}&lt;/SocketProvider&gt;&#10;        &lt;/SessionProviderWrapper&gt;&#10;        &lt;Toaster /&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="import { Geist, Geist_Mono } from &quot;next/font/google&quot;;&#10;import &quot;./globals.css&quot;;&#10;&#10;import { Toaster } from &quot;@/components/ui/sonner&quot;;&#10;import { authOptions } from &quot;@/auth&quot;;&#10;import { SessionProviderWrapper } from &quot;./lib/SessionProviderWrapper&quot;;&#10;import { getServerSession } from &quot;next-auth&quot;;&#10;import { SocketProvider } from &quot;./context/SocketContext&quot;;&#10;import Navbar from &quot;./components/common/Navbar&quot;;&#10;import Footer from &quot;./components/common/Footer&quot;;&#10;&#10;const geistSans = Geist({&#10;  variable: &quot;--font-geist-sans&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;const geistMono = Geist_Mono({&#10;  variable: &quot;--font-geist-mono&quot;,&#10;  subsets: [&quot;latin&quot;],&#10;});&#10;&#10;export const metadata = {&#10;  title: &quot;CommerceHub - B2B Marketplace&quot;,&#10;  description:&#10;    &quot;Your trusted B2B marketplace connecting buyers and sellers worldwide&quot;,&#10;  icons: {&#10;    icon: [&#10;      {&#10;        url: &quot;/logo.png&quot;,&#10;        sizes: &quot;32x32&quot;,&#10;        type: &quot;image/png&quot;,&#10;      },&#10;    ],&#10;    shortcut: &quot;/logo.png&quot;,&#10;    apple: &quot;/logo.png&quot;,&#10;  },&#10;};&#10;&#10;export default async function RootLayout({ children }) {&#10;  const session = await getServerSession(authOptions);&#10;  return (&#10;    &lt;html lang=&quot;en&quot;&gt;&#10;      &lt;head&gt;&#10;        &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt;&#10;        &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot; /&gt;&#10;        &lt;meta&#10;          name=&quot;keywords&quot;&#10;          content=&quot;B2B, marketplace, commerce, buyers, sellers, wholesale, business&quot;&#10;        /&gt;&#10;        &lt;meta name=&quot;author&quot; content=&quot;CommerceHub&quot; /&gt;&#10;        &lt;link rel=&quot;icon&quot; href=&quot;/logo.png&quot; /&gt;&#10;        &lt;link rel=&quot;apple-touch-icon&quot; href=&quot;/logo.png&quot; /&gt;&#10;        &lt;script&#10;          async&#10;          defer&#10;          src={`https://maps.googleapis.com/maps/api/js?key=${process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY}&amp;libraries=places&amp;loading=async&amp;callback=initMap`}&#10;        /&gt;&#10;        &lt;script&#10;          type=&quot;module&quot;&#10;          src=&quot;https://unpkg.com/@googlemaps/extended-component-library@0.6&quot;&#10;        /&gt;&#10;      &lt;/head&gt;&#10;      &lt;body&#10;        className={`${geistSans.variable} ${geistMono.variable} antialiased max-w-[1536px] mx-auto bg-[#F1F1F1]`}&#10;      &gt;&#10;        &lt;SessionProviderWrapper session={session}&gt;&#10;          &lt;SocketProvider&gt;&#10;            &lt;Navbar /&gt;&#10;            &lt;main&gt;{children}&lt;/main&gt;&#10;            &lt;Footer /&gt;&#10;          &lt;/SocketProvider&gt;&#10;        &lt;/SessionProviderWrapper&gt;&#10;        &lt;Toaster /&gt;&#10;      &lt;/body&gt;&#10;    &lt;/html&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/products/page.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/products/page.jsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo } from &quot;react&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { LuSearch } from &quot;react-icons/lu&quot;;&#10;import Navbar from &quot;../components/common/Navbar&quot;;&#10;import { useSearchParams } from &quot;next/navigation&quot;;&#10;import BulkPriceDialog from &quot;../components/common/BulkPriceDialog&quot;;&#10;&#10;export default function SearchProducts() {&#10;  const [products, setProducts] = useState([]);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [resultsPerPage, setResultsPerPage] = useState(20);&#10;  const [loading, setLoading] = useState(true);&#10;&#10;  const searchParams = useSearchParams();&#10;  const searchQuery = searchParams.get(&quot;search&quot;)?.toLowerCase() || &quot;&quot;;&#10;&#10;  // Fetch products&#10;  useEffect(() =&gt; {&#10;    const fetchData = async () =&gt; {&#10;      try {&#10;        const res = await axios.get(&quot;/api/products&quot;);&#10;        const data = res.data.products;&#10;        setProducts(data);&#10;        setLoading(false);&#10;      } catch (error) {&#10;        console.error(&quot;Failed to fetch:&quot;, error);&#10;        setLoading(false);&#10;      }&#10;    };&#10;    fetchData();&#10;  }, []);&#10;&#10;  // Filter products by search query&#10;  const filteredProducts = useMemo(() =&gt; {&#10;    if (!searchQuery) return products;&#10;&#10;    return products.filter((product) =&gt;&#10;      product.name.toLowerCase().includes(searchQuery)&#10;    );&#10;  }, [products, searchQuery]);&#10;&#10;  // Pagination logic&#10;  const totalPages = Math.ceil(filteredProducts.length / resultsPerPage);&#10;&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    return filteredProducts.slice(&#10;      (currentPage - 1) * resultsPerPage,&#10;      currentPage * resultsPerPage&#10;    );&#10;  }, [filteredProducts, currentPage, resultsPerPage]);&#10;&#10;  const handleCardClick = (id) =&gt; {&#10;    console.log(&quot;View Product ID:&quot;, id);&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Navbar /&gt;&#10;      &lt;div className=&quot;flex flex-col md:flex-row min-h-screen bg-[#F5F5F5]&quot;&gt;&#10;        {/* Sidebar with static location search */}&#10;        &lt;aside className=&quot;w-full md:w-[220px] bg-[#F5F5F5] border-r border-gray-200 px-4 py-6&quot;&gt;&#10;          &lt;h2 className=&quot;font-semibold text-sm text-gray-700 mb-2&quot;&gt;Location&lt;/h2&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Search location...&quot;&#10;              className=&quot;w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-sm bg-gray-100 text-gray-500&quot;&#10;            /&gt;&#10;            &lt;LuSearch&#10;              className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400&quot;&#10;              size={16}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/aside&gt;&#10;&#10;        {/* Main Content */}&#10;        &lt;main className=&quot;flex-1 p-4 md:p-8 bg-white&quot;&gt;&#10;          {searchQuery &amp;&amp; (&#10;            &lt;p className=&quot;text-sm text-gray-600 mb-6&quot;&gt;&#10;              Showing results for{&quot; &quot;}&#10;              &lt;span className=&quot;font-semibold text-black&quot;&gt;{searchQuery}&lt;/span&gt;&#10;            &lt;/p&gt;&#10;          )}&#10;&#10;          {loading ? (&#10;            &lt;p className=&quot;text-center text-gray-500&quot;&gt;Loading products...&lt;/p&gt;&#10;          ) : filteredProducts.length === 0 ? (&#10;            &lt;p className=&quot;text-center text-gray-500&quot;&gt;No products found.&lt;/p&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6&quot;&gt;&#10;                {paginatedProducts.map((product, index) =&gt; (&#10;                  &lt;div&#10;                    key={index}&#10;                    className=&quot;flex flex-col justify-between bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200&quot;&#10;                  &gt;&#10;                    &lt;img&#10;                      src={product.images[0]?.url}&#10;                      alt={product.name}&#10;                      className=&quot;w-full h-[240px] object-cover&quot;&#10;                    /&gt;&#10;&#10;                    &lt;div className=&quot;p-4 flex flex-col gap-2 flex-1&quot;&gt;&#10;                      &lt;h3 className=&quot;font-medium text-base text-gray-900 line-clamp-2&quot;&gt;&#10;                        {product.name}&#10;                      &lt;/h3&gt;&#10;                      &lt;p className=&quot;text-gray-700 text-sm&quot;&gt;&#10;                        PKR {product.price?.toLocaleString()}&#10;                      &lt;/p&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                        Min Qty - {product.minOrderQuantity || &quot;N/A&quot;} Pcs&#10;                      &lt;/p&gt;&#10;                      &lt;p className=&quot;text-sm text-gray-500 italic mt-1&quot;&gt;&#10;                        {product.supplier || &quot;Madina Traders&quot;} -{&quot; &quot;}&#10;                        {product.location || &quot;Lahore&quot;}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;p-4 pt-0 grid grid-cols-2 gap-3&quot;&gt;&#10;                      &lt;BulkPriceDialog product={product} /&gt;&#10;                      &lt;button className=&quot;bg-black text-white hover:bg-gray-800 py-2 text-sm rounded-md&quot;&gt;&#10;                        Contact Seller&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;&#10;              {/* Pagination */}&#10;              {totalPages &gt; 1 &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center justify-center gap-2 mt-10 flex-wrap&quot;&gt;&#10;                  {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map(&#10;                    (page) =&gt; (&#10;                      &lt;button&#10;                        key={page}&#10;                        onClick={() =&gt; setCurrentPage(page)}&#10;                        className={`w-8 h-8 flex items-center justify-center border rounded text-sm font-medium ${&#10;                          currentPage === page&#10;                            ? &quot;bg-black text-white&quot;&#10;                            : &quot;bg-white text-gray-700&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {page}&#10;                      &lt;/button&gt;&#10;                    )&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/main&gt;&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import { useState, useEffect, useMemo } from &quot;react&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { LuSearch } from &quot;react-icons/lu&quot;;&#10;import Navbar from &quot;../components/common/Navbar&quot;;&#10;import { useSearchParams, useRouter } from &quot;next/navigation&quot;;&#10;import BulkPriceDialog from &quot;../components/common/BulkPriceDialog&quot;;&#10;&#10;export default function SearchProducts() {&#10;  const [products, setProducts] = useState([]);&#10;  const [currentPage, setCurrentPage] = useState(1);&#10;  const [resultsPerPage, setResultsPerPage] = useState(20);&#10;  const [loading, setLoading] = useState(true);&#10;  const router = useRouter();&#10;&#10;  const searchParams = useSearchParams();&#10;  const searchQuery = searchParams.get(&quot;search&quot;)?.toLowerCase() || &quot;&quot;;&#10;&#10;  // Fetch products&#10;  useEffect(() =&gt; {&#10;    const fetchData = async () =&gt; {&#10;      try {&#10;        const res = await axios.get(&quot;/api/products&quot;);&#10;        const data = res.data.products;&#10;        setProducts(data);&#10;        setLoading(false);&#10;      } catch (error) {&#10;        console.error(&quot;Failed to fetch:&quot;, error);&#10;        setLoading(false);&#10;      }&#10;    };&#10;    fetchData();&#10;  }, []);&#10;&#10;  // Filter products by search query&#10;  const filteredProducts = useMemo(() =&gt; {&#10;    if (!searchQuery) return products;&#10;&#10;    return products.filter((product) =&gt;&#10;      product.name.toLowerCase().includes(searchQuery)&#10;    );&#10;  }, [products, searchQuery]);&#10;&#10;  // Pagination logic&#10;  const totalPages = Math.ceil(filteredProducts.length / resultsPerPage);&#10;&#10;  const paginatedProducts = useMemo(() =&gt; {&#10;    return filteredProducts.slice(&#10;      (currentPage - 1) * resultsPerPage,&#10;      currentPage * resultsPerPage&#10;    );&#10;  }, [filteredProducts, currentPage, resultsPerPage]);&#10;&#10;  // Navigate to business profile page&#10;  const navigateToBusinessProfile = (sellerId) =&gt; {&#10;    if (!sellerId) {&#10;      console.error(&quot;No seller ID available for this product&quot;);&#10;      return;&#10;    }&#10;    router.push(`/business-profile/${sellerId}`);&#10;  };&#10;&#10;  return (&#10;    &lt;&gt;&#10;      &lt;Navbar /&gt;&#10;      &lt;div className=&quot;flex flex-col md:flex-row min-h-screen bg-[#F5F5F5]&quot;&gt;&#10;        {/* Sidebar with static location search */}&#10;        &lt;aside className=&quot;w-full md:w-[220px] bg-[#F5F5F5] border-r border-gray-200 px-4 py-6&quot;&gt;&#10;          &lt;h2 className=&quot;font-semibold text-sm text-gray-700 mb-2&quot;&gt;Location&lt;/h2&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            &lt;input&#10;              type=&quot;text&quot;&#10;              placeholder=&quot;Search location...&quot;&#10;              className=&quot;w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md text-sm bg-gray-100 text-gray-500&quot;&#10;            /&gt;&#10;            &lt;LuSearch&#10;              className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400&quot;&#10;              size={16}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        &lt;/aside&gt;&#10;&#10;        {/* Main Content */}&#10;        &lt;main className=&quot;flex-1 p-4 md:p-8 bg-white&quot;&gt;&#10;          {searchQuery &amp;&amp; (&#10;            &lt;p className=&quot;text-sm text-gray-600 mb-6&quot;&gt;&#10;              Showing results for{&quot; &quot;}&#10;              &lt;span className=&quot;font-semibold text-black&quot;&gt;{searchQuery}&lt;/span&gt;&#10;            &lt;/p&gt;&#10;          )}&#10;&#10;          {loading ? (&#10;            &lt;p className=&quot;text-center text-gray-500&quot;&gt;Loading products...&lt;/p&gt;&#10;          ) : filteredProducts.length === 0 ? (&#10;            &lt;p className=&quot;text-center text-gray-500&quot;&gt;No products found.&lt;/p&gt;&#10;          ) : (&#10;            &lt;&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 sm:grid-cols-2 xl:grid-cols-4 gap-6&quot;&gt;&#10;                {paginatedProducts.map((product, index) =&gt; (&#10;                  &lt;div&#10;                    key={index}&#10;                    className=&quot;flex flex-col justify-between bg-white rounded-lg overflow-hidden shadow-sm border border-gray-200 cursor-pointer&quot;&#10;                  &gt;&#10;                    &lt;div onClick={() =&gt; navigateToBusinessProfile(product.seller)}&gt;&#10;                      &lt;img&#10;                        src={product.images[0]?.url}&#10;                        alt={product.name}&#10;                        className=&quot;w-full h-[240px] object-cover&quot;&#10;                      /&gt;&#10;&#10;                      &lt;div className=&quot;p-4 flex flex-col gap-2 flex-1&quot;&gt;&#10;                        &lt;h3 className=&quot;font-medium text-base text-gray-900 line-clamp-2&quot;&gt;&#10;                          {product.name}&#10;                        &lt;/h3&gt;&#10;                        &lt;p className=&quot;text-gray-700 text-sm&quot;&gt;&#10;                          PKR {product.price?.toLocaleString()}&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;                          Min Qty - {product.minOrderQuantity || &quot;N/A&quot;} Pcs&#10;                        &lt;/p&gt;&#10;                        &lt;p className=&quot;text-sm text-gray-500 italic mt-1&quot;&gt;&#10;                          {product.supplier || &quot;Madina Traders&quot;} -{&quot; &quot;}&#10;                          {product.location || &quot;Lahore&quot;}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;&#10;                    &lt;div className=&quot;p-4 pt-0 grid grid-cols-2 gap-3&quot;&gt;&#10;                      &lt;BulkPriceDialog product={product} /&gt;&#10;                      &lt;button&#10;                        className=&quot;bg-black text-white hover:bg-gray-800 py-2 text-sm rounded-md&quot;&#10;                        onClick={() =&gt; navigateToBusinessProfile(product.seller)}&#10;                      &gt;&#10;                        Contact Seller&#10;                      &lt;/button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;&#10;              {/* Pagination */}&#10;              {totalPages &gt; 1 &amp;&amp; (&#10;                &lt;div className=&quot;flex items-center justify-center gap-2 mt-10 flex-wrap&quot;&gt;&#10;                  {Array.from({ length: totalPages }, (_, i) =&gt; i + 1).map(&#10;                    (page) =&gt; (&#10;                      &lt;button&#10;                        key={page}&#10;                        onClick={() =&gt; setCurrentPage(page)}&#10;                        className={`w-8 h-8 flex items-center justify-center border rounded text-sm font-medium ${&#10;                          currentPage === page&#10;                            ? &quot;bg-black text-white&quot;&#10;                            : &quot;bg-white text-gray-700&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {page}&#10;                      &lt;/button&gt;&#10;                    )&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/&gt;&#10;          )}&#10;        &lt;/main&gt;&#10;      &lt;/div&gt;&#10;    &lt;/&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/app/suppliers/page.jsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/app/suppliers/page.jsx" />
              <option name="originalContent" value="&quot;use client&quot;;&#10;&#10;import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;import Navbar from &quot;@/app/components/common/Navbar&quot;;&#10;import {&#10;  MapPin,&#10;  Phone,&#10;  Mail,&#10;  Globe,&#10;  Star,&#10;  Filter,&#10;  Search,&#10;  Grid,&#10;  List,&#10;  ChevronLeft,&#10;  ChevronRight,&#10;  Building2,&#10;  Eye,&#10;  Calendar,&#10;  Package,&#10;} from &quot;lucide-react&quot;;&#10;&#10;export default function SuppliersPage() {&#10;  const router = useRouter();&#10;  const [stores, setStores] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;); // grid or list&#10;  const [filters, setFilters] = useState({&#10;    region: &quot;all&quot;,&#10;    category: &quot;all&quot;,&#10;    service: &quot;all&quot;,&#10;    search: &quot;&quot;,&#10;    sortBy: &quot;createdAt&quot;,&#10;    sortOrder: &quot;desc&quot;,&#10;  });&#10;  const [pagination, setPagination] = useState({&#10;    currentPage: 1,&#10;    totalPages: 1,&#10;    totalStores: 0,&#10;    hasNextPage: false,&#10;    hasPrevPage: false,&#10;    limit: 12,&#10;  });&#10;  const [filterOptions, setFilterOptions] = useState({&#10;    regions: [],&#10;    categories: [],&#10;    services: [],&#10;  });&#10;  const [showFilters, setShowFilters] = useState(false);&#10;&#10;  // Fetch stores data&#10;  const fetchStores = async (page = 1) =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        limit: pagination.limit.toString(),&#10;        sortBy: filters.sortBy,&#10;        sortOrder: filters.sortOrder,&#10;      });&#10;&#10;      if (filters.region !== &quot;all&quot;) params.append(&quot;region&quot;, filters.region);&#10;      if (filters.category !== &quot;all&quot;)&#10;        params.append(&quot;category&quot;, filters.category);&#10;      if (filters.service !== &quot;all&quot;) params.append(&quot;service&quot;, filters.service);&#10;      if (filters.search.trim()) params.append(&quot;search&quot;, filters.search.trim());&#10;&#10;      const response = await axios.get(`/api/store/all?${params}`);&#10;      console.log(&quot;API Response:&quot;, response.data);&#10;&#10;      if (response.data.success) {&#10;        setStores(response.data.data.stores);&#10;        setPagination(response.data.data.pagination);&#10;        setFilterOptions(response.data.data.filters);&#10;      } else {&#10;        toast.error(&quot;Failed to fetch stores&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching stores:&quot;, error);&#10;      toast.error(&quot;Failed to load suppliers&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    // Check for URL parameters&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    const serviceParam = urlParams.get(&quot;service&quot;);&#10;&#10;    if (serviceParam) {&#10;      setFilters((prev) =&gt; ({ ...prev, service: serviceParam }));&#10;    }&#10;&#10;    fetchStores();&#10;  }, []);&#10;&#10;  // Handle URL parameter changes&#10;  useEffect(() =&gt; {&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    const serviceParam = urlParams.get(&quot;service&quot;);&#10;&#10;    if (serviceParam &amp;&amp; serviceParam !== filters.service) {&#10;      setFilters((prev) =&gt; ({ ...prev, service: serviceParam }));&#10;      // Re-fetch stores with new service filter&#10;      setTimeout(() =&gt; fetchStores(1), 100);&#10;    }&#10;  }, []);&#10;&#10;  // Handle filter changes&#10;  const handleFilterChange = (key, value) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, [key]: value }));&#10;  };&#10;&#10;  // Apply filters&#10;  const applyFilters = () =&gt; {&#10;    fetchStores(1);&#10;  };&#10;&#10;  // Handle page change&#10;  const handlePageChange = (page) =&gt; {&#10;    fetchStores(page);&#10;    window.scrollTo({ top: 0, behavior: &quot;smooth&quot; });&#10;  };&#10;&#10;  // Handle view store details&#10;  const handleViewDetails = (ownerId) =&gt; {&#10;    router.push(`/business-profile/${ownerId}`);&#10;  };&#10;&#10;  // Search handler&#10;  const handleSearch = (e) =&gt; {&#10;    e.preventDefault();&#10;    applyFilters();&#10;  };&#10;&#10;  // Reset filters&#10;  const resetFilters = () =&gt; {&#10;    setFilters({&#10;      region: &quot;all&quot;,&#10;      category: &quot;all&quot;,&#10;      service: &quot;all&quot;,&#10;      search: &quot;&quot;,&#10;      sortBy: &quot;createdAt&quot;,&#10;      sortOrder: &quot;desc&quot;,&#10;    });&#10;    setTimeout(() =&gt; fetchStores(1), 100);&#10;  };&#10;&#10;  // Store card component&#10;  const StoreCard = ({ store, viewMode }) =&gt; {&#10;    const isGridView = viewMode === &quot;grid&quot;;&#10;&#10;    return (&#10;      &lt;div&#10;        className={`bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden ${&#10;          isGridView ? &quot;h-full&quot; : &quot;flex&quot;&#10;        }`}&#10;      &gt;&#10;        {/* Store Banner/Image */}&#10;        &lt;div&#10;          className={`${&#10;            isGridView ? &quot;h-48&quot; : &quot;w-48 flex-shrink-0&quot;&#10;          } bg-gradient-to-br from-[#C9AF2F] to-[#B8A028] relative`}&#10;        &gt;&#10;          {store.bannerImage?.url ? (&#10;            &lt;img&#10;              src={store.bannerImage.url}&#10;              alt={store.name}&#10;              className=&quot;w-full h-full object-cover&quot;&#10;            /&gt;&#10;          ) : (&#10;            &lt;div className=&quot;w-full h-full flex items-center justify-center&quot;&gt;&#10;              &lt;Building2 className=&quot;w-16 h-16 text-white opacity-80&quot; /&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          &lt;div className=&quot;absolute top-2 right-2 bg-white px-2 py-1 rounded-full text-xs font-medium&quot;&gt;&#10;            {store.isVerified ? (&#10;              &lt;span className=&quot;text-green-600&quot;&gt;✓ Verified&lt;/span&gt;&#10;            ) : (&#10;              &lt;span className=&quot;text-gray-600&quot;&gt;Pending&lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Store Details */}&#10;        &lt;div className={`p-4 ${isGridView ? &quot;&quot; : &quot;flex-1&quot;}`}&gt;&#10;          &lt;div className=&quot;flex justify-between items-start mb-2&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold text-gray-900 line-clamp-1&quot;&gt;&#10;              {store.name}&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;flex items-center text-yellow-500&quot;&gt;&#10;              &lt;Star className=&quot;w-4 h-4 fill-current&quot; /&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600 ml-1&quot;&gt;4.5&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;p className=&quot;text-sm text-gray-600 mb-2&quot;&gt;{store.businessType}&lt;/p&gt;&#10;&#10;          &lt;p className=&quot;text-sm text-gray-700 line-clamp-2 mb-3&quot;&gt;&#10;            {store.description}&#10;          &lt;/p&gt;&#10;&#10;          {/* Location */}&#10;          &lt;div className=&quot;flex items-center text-sm text-gray-600 mb-2&quot;&gt;&#10;            &lt;MapPin className=&quot;w-4 h-4 mr-1 flex-shrink-0&quot; /&gt;&#10;            &lt;span className=&quot;line-clamp-1&quot;&gt;&#10;              {store.location?.formattedAddress || store.address}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Contact Info */}&#10;          &lt;div className=&quot;flex items-center text-sm text-gray-600 mb-2&quot;&gt;&#10;            &lt;Phone className=&quot;w-4 h-4 mr-1 flex-shrink-0&quot; /&gt;&#10;            &lt;span&gt;{store.phone}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Categories */}&#10;          {store.productCategories &amp;&amp; store.productCategories.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;flex items-center text-sm text-gray-600 mb-3&quot;&gt;&#10;              &lt;Package className=&quot;w-4 h-4 mr-1 flex-shrink-0&quot; /&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                {store.productCategories.slice(0, 2).map((category, index) =&gt; (&#10;                  &lt;span&#10;                    key={index}&#10;                    className=&quot;bg-gray-100 text-gray-700 px-2 py-1 rounded-full text-xs&quot;&#10;                  &gt;&#10;                    {category}&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {store.productCategories.length &gt; 2 &amp;&amp; (&#10;                  &lt;span className=&quot;text-gray-500 text-xs&quot;&gt;&#10;                    +{store.productCategories.length - 2}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Branding Services */}&#10;          {store.brandingServices &amp;&amp; store.brandingServices.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;flex items-center text-sm text-gray-600 mb-3&quot;&gt;&#10;              &lt;div className=&quot;w-4 h-4 mr-1 flex-shrink-0 text-[#C9AF2F]&quot;&gt;★&lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                {store.brandingServices.slice(0, 2).map((service, index) =&gt; (&#10;                  &lt;span&#10;                    key={index}&#10;                    className=&quot;bg-[#C9AF2F] bg-opacity-10 text-[#C9AF2F] px-2 py-1 rounded-full text-xs font-medium&quot;&#10;                  &gt;&#10;                    {service}&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {store.brandingServices.length &gt; 2 &amp;&amp; (&#10;                  &lt;span className=&quot;text-[#C9AF2F] text-xs font-medium&quot;&gt;&#10;                    +{store.brandingServices.length - 2}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Action Button */}&#10;          &lt;button&#10;            onClick={() =&gt; handleViewDetails(store.owner._id)}&#10;            className=&quot;w-full bg-[#C9AF2F] hover:bg-[#B8A028] text-white py-2 px-4 rounded-md transition-colors duration-200 flex items-center justify-center gap-2&quot;&#10;          &gt;&#10;            &lt;Eye className=&quot;w-4 h-4&quot; /&gt;&#10;            View Details&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;Navbar /&gt;&#10;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;mb-8&quot;&gt;&#10;          &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-2&quot;&gt;&#10;            Find Suppliers&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;&#10;            Discover verified suppliers and their business profiles&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Search and Filters */}&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6 mb-6&quot;&gt;&#10;          {/* Search Bar */}&#10;          &lt;form onSubmit={handleSearch} className=&quot;mb-4&quot;&gt;&#10;            &lt;div className=&quot;flex gap-4&quot;&gt;&#10;              &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;                &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5&quot; /&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  placeholder=&quot;Search suppliers, products, or business types...&quot;&#10;                  value={filters.search}&#10;                  onChange={(e) =&gt; handleFilterChange(&quot;search&quot;, e.target.value)}&#10;                  className=&quot;w-full pl-10 pr-4 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                className=&quot;bg-[#C9AF2F] hover:bg-[#B8A028] text-white px-6 py-2 rounded-md transition-colors duration-200&quot;&#10;              &gt;&#10;                Search&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;&#10;          {/* Filter Toggle */}&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowFilters(!showFilters)}&#10;              className=&quot;flex items-center gap-2 text-gray-600 hover:text-gray-900&quot;&#10;            &gt;&#10;              &lt;Filter className=&quot;w-4 h-4&quot; /&gt;&#10;              Filters&#10;            &lt;/button&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-4&quot;&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600&quot;&gt;&#10;                {pagination.totalStores} suppliers found&#10;              &lt;/span&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex border border-gray-300 rounded-md overflow-hidden&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setViewMode(&quot;grid&quot;)}&#10;                  className={`p-2 ${&#10;                    viewMode === &quot;grid&quot;&#10;                      ? &quot;bg-[#C9AF2F] text-white&quot;&#10;                      : &quot;bg-white text-gray-600&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;Grid className=&quot;w-4 h-4&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setViewMode(&quot;list&quot;)}&#10;                  className={`p-2 ${&#10;                    viewMode === &quot;list&quot;&#10;                      ? &quot;bg-[#C9AF2F] text-white&quot;&#10;                      : &quot;bg-white text-gray-600&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;List className=&quot;w-4 h-4&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Expandable Filters */}&#10;          {showFilters &amp;&amp; (&#10;            &lt;div className=&quot;mt-4 pt-4 border-t border-gray-200&quot;&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-4&quot;&gt;&#10;                {/* Region Filter */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Region&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.region}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;region&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;all&quot;&gt;All Regions&lt;/option&gt;&#10;                    {filterOptions.regions.map((region) =&gt; (&#10;                      &lt;option key={region} value={region}&gt;&#10;                        {region}&#10;                      &lt;/option&gt;&#10;                    ))}&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Category&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.category}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;category&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;all&quot;&gt;All Categories&lt;/option&gt;&#10;                    {filterOptions.categories.map((category) =&gt; (&#10;                      &lt;option key={category} value={category}&gt;&#10;                        {category}&#10;                      &lt;/option&gt;&#10;                    ))}&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Service Filter */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Branding Service&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.service}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;service&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;all&quot;&gt;All Services&lt;/option&gt;&#10;                    {filterOptions.services.map((service) =&gt; (&#10;                      &lt;option key={service} value={service}&gt;&#10;                        {service}&#10;                      &lt;/option&gt;&#10;                    ))}&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sort By */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Sort By&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.sortBy}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;sortBy&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;createdAt&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;name&quot;&gt;Name (A-Z)&lt;/option&gt;&#10;                    &lt;option value=&quot;yearEstablished&quot;&gt;Established Year&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Actions */}&#10;                &lt;div className=&quot;flex items-end gap-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={applyFilters}&#10;                    className=&quot;flex-1 bg-[#C9AF2F] hover:bg-[#B8A028] text-white py-2 px-4 rounded-md text-sm transition-colors duration-200&quot;&#10;                  &gt;&#10;                    Apply&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={resetFilters}&#10;                    className=&quot;flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 py-2 px-4 rounded-md text-sm transition-colors duration-200&quot;&#10;                  &gt;&#10;                    Reset&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Loading State */}&#10;        {loading ? (&#10;          &lt;div className=&quot;flex justify-center items-center py-12&quot;&gt;&#10;            &lt;div className=&quot;animate-spin rounded-full h-8 w-8 border-b-2 border-[#C9AF2F]&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            {/* Stores Grid/List */}&#10;            {stores.length &gt; 0 ? (&#10;              &lt;div&#10;                className={&#10;                  viewMode === &quot;grid&quot;&#10;                    ? &quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6 mb-8&quot;&#10;                    : &quot;space-y-4 mb-8&quot;&#10;                }&#10;              &gt;&#10;                {stores.map((store) =&gt; (&#10;                  &lt;StoreCard&#10;                    key={store._id}&#10;                    store={store}&#10;                    viewMode={viewMode}&#10;                  /&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;text-center py-12&quot;&gt;&#10;                &lt;Building2 className=&quot;w-16 h-16 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;                &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-2&quot;&gt;&#10;                  No suppliers found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-gray-600 mb-4&quot;&gt;&#10;                  Try adjusting your search criteria or filters&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={resetFilters}&#10;                  className=&quot;bg-[#C9AF2F] hover:bg-[#B8A028] text-white py-2 px-4 rounded-md transition-colors duration-200&quot;&#10;                &gt;&#10;                  Clear all filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Pagination */}&#10;            {pagination.totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;flex justify-center items-center gap-2&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; handlePageChange(pagination.currentPage - 1)}&#10;                  disabled={!pagination.hasPrevPage}&#10;                  className=&quot;p-2 rounded-md border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50&quot;&#10;                &gt;&#10;                  &lt;ChevronLeft className=&quot;w-5 h-5&quot; /&gt;&#10;                &lt;/button&gt;&#10;&#10;                {[...Array(pagination.totalPages)].map((_, index) =&gt; {&#10;                  const pageNum = index + 1;&#10;                  const isCurrentPage = pageNum === pagination.currentPage;&#10;&#10;                  // Show only a few pages around current page&#10;                  if (&#10;                    pageNum === 1 ||&#10;                    pageNum === pagination.totalPages ||&#10;                    (pageNum &gt;= pagination.currentPage - 2 &amp;&amp;&#10;                      pageNum &lt;= pagination.currentPage + 2)&#10;                  ) {&#10;                    return (&#10;                      &lt;button&#10;                        key={pageNum}&#10;                        onClick={() =&gt; handlePageChange(pageNum)}&#10;                        className={`px-3 py-2 rounded-md border ${&#10;                          isCurrentPage&#10;                            ? &quot;bg-[#C9AF2F] text-white border-[#C9AF2F]&quot;&#10;                            : &quot;border-gray-300 hover:bg-gray-50&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {pageNum}&#10;                      &lt;/button&gt;&#10;                    );&#10;                  } else if (&#10;                    pageNum === pagination.currentPage - 3 ||&#10;                    pageNum === pagination.currentPage + 3&#10;                  ) {&#10;                    return (&#10;                      &lt;span key={pageNum} className=&quot;px-2&quot;&gt;&#10;                        ...&#10;                      &lt;/span&gt;&#10;                    );&#10;                  }&#10;                  return null;&#10;                })}&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handlePageChange(pagination.currentPage + 1)}&#10;                  disabled={!pagination.hasNextPage}&#10;                  className=&quot;p-2 rounded-md border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50&quot;&#10;                &gt;&#10;                  &lt;ChevronRight className=&quot;w-5 h-5&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="&quot;use client&quot;;&#10;&#10;import React, { useState, useEffect } from &quot;react&quot;;&#10;import { useRouter } from &quot;next/navigation&quot;;&#10;import axios from &quot;axios&quot;;&#10;import { toast } from &quot;sonner&quot;;&#10;import Navbar from &quot;@/app/components/common/Navbar&quot;;&#10;import {&#10;  MapPin,&#10;  Phone,&#10;  Mail,&#10;  Globe,&#10;  Star,&#10;  Filter,&#10;  Search,&#10;  Grid,&#10;  List,&#10;  ChevronLeft,&#10;  ChevronRight,&#10;  Building2,&#10;  Eye,&#10;  Calendar,&#10;  Package,&#10;} from &quot;lucide-react&quot;;&#10;&#10;export default function SuppliersPage() {&#10;  const router = useRouter();&#10;  const [stores, setStores] = useState([]);&#10;  const [loading, setLoading] = useState(true);&#10;  const [viewMode, setViewMode] = useState(&quot;grid&quot;); // grid or list&#10;  const [filters, setFilters] = useState({&#10;    region: &quot;all&quot;,&#10;    category: &quot;all&quot;,&#10;    service: &quot;all&quot;,&#10;    search: &quot;&quot;,&#10;    sortBy: &quot;createdAt&quot;,&#10;    sortOrder: &quot;desc&quot;,&#10;  });&#10;  const [pagination, setPagination] = useState({&#10;    currentPage: 1,&#10;    totalPages: 1,&#10;    totalStores: 0,&#10;    hasNextPage: false,&#10;    hasPrevPage: false,&#10;    limit: 12,&#10;  });&#10;  const [filterOptions, setFilterOptions] = useState({&#10;    regions: [],&#10;    categories: [],&#10;    services: [],&#10;  });&#10;  const [showFilters, setShowFilters] = useState(false);&#10;&#10;  // Fetch stores data&#10;  const fetchStores = async (page = 1) =&gt; {&#10;    try {&#10;      setLoading(true);&#10;      const params = new URLSearchParams({&#10;        page: page.toString(),&#10;        limit: pagination.limit.toString(),&#10;        sortBy: filters.sortBy,&#10;        sortOrder: filters.sortOrder,&#10;      });&#10;&#10;      if (filters.region !== &quot;all&quot;) params.append(&quot;region&quot;, filters.region);&#10;      if (filters.category !== &quot;all&quot;)&#10;        params.append(&quot;category&quot;, filters.category);&#10;      if (filters.service !== &quot;all&quot;) params.append(&quot;service&quot;, filters.service);&#10;      if (filters.search.trim()) params.append(&quot;search&quot;, filters.search.trim());&#10;&#10;      const response = await axios.get(`/api/store/all?${params}`);&#10;      console.log(&quot;API Response:&quot;, response.data);&#10;&#10;      if (response.data.success) {&#10;        setStores(response.data.data.stores);&#10;        setPagination(response.data.data.pagination);&#10;        setFilterOptions(response.data.data.filters);&#10;      } else {&#10;        toast.error(&quot;Failed to fetch stores&quot;);&#10;      }&#10;    } catch (error) {&#10;      console.error(&quot;Error fetching stores:&quot;, error);&#10;      toast.error(&quot;Failed to load suppliers&quot;);&#10;    } finally {&#10;      setLoading(false);&#10;    }&#10;  };&#10;&#10;  // Initial fetch&#10;  useEffect(() =&gt; {&#10;    // Check for URL parameters&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    const serviceParam = urlParams.get(&quot;service&quot;);&#10;&#10;    if (serviceParam) {&#10;      setFilters((prev) =&gt; ({ ...prev, service: serviceParam }));&#10;    }&#10;&#10;    fetchStores();&#10;  }, []);&#10;&#10;  // Handle URL parameter changes&#10;  useEffect(() =&gt; {&#10;    const urlParams = new URLSearchParams(window.location.search);&#10;    const serviceParam = urlParams.get(&quot;service&quot;);&#10;&#10;    if (serviceParam &amp;&amp; serviceParam !== filters.service) {&#10;      setFilters((prev) =&gt; ({ ...prev, service: serviceParam }));&#10;      // Re-fetch stores with new service filter&#10;      setTimeout(() =&gt; fetchStores(1), 100);&#10;    }&#10;  }, []);&#10;&#10;  // Handle filter changes&#10;  const handleFilterChange = (key, value) =&gt; {&#10;    setFilters((prev) =&gt; ({ ...prev, [key]: value }));&#10;  };&#10;&#10;  // Apply filters&#10;  const applyFilters = () =&gt; {&#10;    fetchStores(1);&#10;  };&#10;&#10;  // Handle page change&#10;  const handlePageChange = (page) =&gt; {&#10;    fetchStores(page);&#10;    window.scrollTo({ top: 0, behavior: &quot;smooth&quot; });&#10;  };&#10;&#10;  // Handle view store details&#10;  const handleViewDetails = (ownerId) =&gt; {&#10;    router.push(`/business-profile/${ownerId}`);&#10;  };&#10;&#10;  // Search handler&#10;  const handleSearch = (e) =&gt; {&#10;    e.preventDefault();&#10;    applyFilters();&#10;  };&#10;&#10;  // Reset filters&#10;  const resetFilters = () =&gt; {&#10;    setFilters({&#10;      region: &quot;all&quot;,&#10;      category: &quot;all&quot;,&#10;      service: &quot;all&quot;,&#10;      search: &quot;&quot;,&#10;      sortBy: &quot;createdAt&quot;,&#10;      sortOrder: &quot;desc&quot;,&#10;    });&#10;    setTimeout(() =&gt; fetchStores(1), 100);&#10;  };&#10;&#10;  // Store card component&#10;  const StoreCard = ({ store, viewMode }) =&gt; {&#10;    const isGridView = viewMode === &quot;grid&quot;;&#10;&#10;    return (&#10;      &lt;div&#10;        className={`bg-white shadow-sm hover:shadow-md transition-shadow duration-300 border border-gray-200 ${&#10;          isGridView ? &quot;h-full&quot; : &quot;flex&quot;&#10;        }`}&#10;      &gt;&#10;        {/* Store Banner/Image */}&#10;        &lt;div&#10;          className={`${&#10;            isGridView ? &quot;h-40&quot; : &quot;w-40 flex-shrink-0&quot;&#10;          } bg-[#C9AF2F] relative`}&#10;        &gt;&#10;          {store.bannerImage?.url ? (&#10;            &lt;img&#10;              src={store.bannerImage.url}&#10;              alt={store.name}&#10;              className=&quot;w-full h-full object-cover&quot;&#10;            /&gt;&#10;          ) : (&#10;            &lt;div className=&quot;w-full h-full flex items-center justify-center&quot;&gt;&#10;              &lt;Building2 className=&quot;w-12 h-12 text-white opacity-80&quot; /&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;          &lt;div className=&quot;absolute top-2 right-2 bg-white px-2 py-0.5 text-xs font-medium&quot;&gt;&#10;            {store.isVerified ? (&#10;              &lt;span className=&quot;text-green-600&quot;&gt;✓ Verified&lt;/span&gt;&#10;            ) : (&#10;              &lt;span className=&quot;text-gray-600&quot;&gt;Pending&lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Store Details */}&#10;        &lt;div className={`p-3 ${isGridView ? &quot;&quot; : &quot;flex-1&quot;}`}&gt;&#10;          &lt;div className=&quot;flex justify-between items-start mb-1.5&quot;&gt;&#10;            &lt;h3 className=&quot;text-base font-semibold text-gray-900 line-clamp-1&quot;&gt;&#10;              {store.name}&#10;            &lt;/h3&gt;&#10;            &lt;div className=&quot;flex items-center text-yellow-500&quot;&gt;&#10;              &lt;Star className=&quot;w-3 h-3 fill-current&quot; /&gt;&#10;              &lt;span className=&quot;text-xs text-gray-600 ml-1&quot;&gt;4.5&lt;/span&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          &lt;p className=&quot;text-xs text-gray-600 mb-1.5&quot;&gt;{store.businessType}&lt;/p&gt;&#10;&#10;          &lt;p className=&quot;text-xs text-gray-700 line-clamp-2 mb-2&quot;&gt;&#10;            {store.description}&#10;          &lt;/p&gt;&#10;&#10;          {/* Location */}&#10;          &lt;div className=&quot;flex items-center text-xs text-gray-600 mb-1.5&quot;&gt;&#10;            &lt;MapPin className=&quot;w-3 h-3 mr-1 flex-shrink-0&quot; /&gt;&#10;            &lt;span className=&quot;line-clamp-1&quot;&gt;&#10;              {store.location?.formattedAddress || store.address}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Contact Info */}&#10;          &lt;div className=&quot;flex items-center text-xs text-gray-600 mb-1.5&quot;&gt;&#10;            &lt;Phone className=&quot;w-3 h-3 mr-1 flex-shrink-0&quot; /&gt;&#10;            &lt;span&gt;{store.phone}&lt;/span&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Categories */}&#10;          {store.productCategories &amp;&amp; store.productCategories.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;flex items-center text-xs text-gray-600 mb-2&quot;&gt;&#10;              &lt;Package className=&quot;w-3 h-3 mr-1 flex-shrink-0&quot; /&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                {store.productCategories.slice(0, 2).map((category, index) =&gt; (&#10;                  &lt;span&#10;                    key={index}&#10;                    className=&quot;bg-gray-100 text-gray-700 px-1.5 py-0.5 text-[10px]&quot;&#10;                  &gt;&#10;                    {category}&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {store.productCategories.length &gt; 2 &amp;&amp; (&#10;                  &lt;span className=&quot;text-gray-500 text-[10px]&quot;&gt;&#10;                    +{store.productCategories.length - 2}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Branding Services */}&#10;          {store.brandingServices &amp;&amp; store.brandingServices.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;flex items-center text-xs text-gray-600 mb-2&quot;&gt;&#10;              &lt;div className=&quot;w-3 h-3 mr-1 flex-shrink-0 text-[#C9AF2F]&quot;&gt;★&lt;/div&gt;&#10;              &lt;div className=&quot;flex flex-wrap gap-1&quot;&gt;&#10;                {store.brandingServices.slice(0, 2).map((service, index) =&gt; (&#10;                  &lt;span&#10;                    key={index}&#10;                    className=&quot;bg-[#C9AF2F] bg-opacity-10 text-[#C9AF2F] px-1.5 py-0.5 text-[10px] font-medium&quot;&#10;                  &gt;&#10;                    {service}&#10;                  &lt;/span&gt;&#10;                ))}&#10;                {store.brandingServices.length &gt; 2 &amp;&amp; (&#10;                  &lt;span className=&quot;text-[#C9AF2F] text-[10px] font-medium&quot;&gt;&#10;                    +{store.brandingServices.length - 2}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* Action Button */}&#10;          &lt;button&#10;            onClick={() =&gt; handleViewDetails(store.owner._id)}&#10;            className=&quot;w-full bg-[#C9AF2F] hover:bg-[#B8A028] text-black py-1.5 px-3 text-xs transition-colors duration-200 flex items-center justify-center gap-1&quot;&#10;          &gt;&#10;            &lt;Eye className=&quot;w-3 h-3&quot; /&gt;&#10;            View Details&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-[#F1F1F1]&quot;&gt;&#10;      &lt;Navbar /&gt;&#10;&#10;      &lt;div className=&quot;max-w-7xl mx-auto px-3 sm:px-4 lg:px-6 py-6&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;mb-5&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900 mb-1&quot;&gt;&#10;            Find Suppliers&#10;          &lt;/h1&gt;&#10;          &lt;p className=&quot;text-sm text-gray-600&quot;&gt;&#10;            Discover verified suppliers and their business profiles&#10;          &lt;/p&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Search and Filters */}&#10;        &lt;div className=&quot;bg-white shadow-sm p-4 mb-5 border border-gray-200&quot;&gt;&#10;          {/* Search Bar */}&#10;          &lt;form onSubmit={handleSearch} className=&quot;mb-3&quot;&gt;&#10;            &lt;div className=&quot;flex gap-3&quot;&gt;&#10;              &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;                &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4&quot; /&gt;&#10;                &lt;input&#10;                  type=&quot;text&quot;&#10;                  placeholder=&quot;Search suppliers, products, or business types...&quot;&#10;                  value={filters.search}&#10;                  onChange={(e) =&gt; handleFilterChange(&quot;search&quot;, e.target.value)}&#10;                  className=&quot;w-full pl-9 pr-3 py-1.5 border border-gray-300 focus:ring-1 focus:ring-[#C9AF2F] focus:border-transparent text-sm&quot;&#10;                /&gt;&#10;              &lt;/div&gt;&#10;              &lt;button&#10;                type=&quot;submit&quot;&#10;                className=&quot;bg-[#C9AF2F] hover:bg-[#B8A028] text-black px-5 py-1.5 text-sm transition-colors duration-200&quot;&#10;              &gt;&#10;                Search&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;&#10;          {/* Filter Toggle */}&#10;          &lt;div className=&quot;flex justify-between items-center&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; setShowFilters(!showFilters)}&#10;              className=&quot;flex items-center gap-1.5 text-gray-600 hover:text-gray-900 text-sm&quot;&#10;            &gt;&#10;              &lt;Filter className=&quot;w-3.5 h-3.5&quot; /&gt;&#10;              Filters&#10;            &lt;/button&gt;&#10;&#10;            &lt;div className=&quot;flex items-center gap-3&quot;&gt;&#10;              &lt;span className=&quot;text-xs text-gray-600&quot;&gt;&#10;                {pagination.totalStores} suppliers found&#10;              &lt;/span&gt;&#10;&#10;              {/* View Mode Toggle */}&#10;              &lt;div className=&quot;flex border border-gray-300 overflow-hidden&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setViewMode(&quot;grid&quot;)}&#10;                  className={`p-1.5 ${&#10;                    viewMode === &quot;grid&quot;&#10;                      ? &quot;bg-[#C9AF2F] text-white&quot;&#10;                      : &quot;bg-white text-gray-600&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;Grid className=&quot;w-3.5 h-3.5&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setViewMode(&quot;list&quot;)}&#10;                  className={`p-1.5 ${&#10;                    viewMode === &quot;list&quot;&#10;                      ? &quot;bg-[#C9AF2F] text-white&quot;&#10;                      : &quot;bg-white text-gray-600&quot;&#10;                  }`}&#10;                &gt;&#10;                  &lt;List className=&quot;w-3.5 h-3.5&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Expandable Filters */}&#10;          {showFilters &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 pt-3 border-t border-gray-200&quot;&gt;&#10;              &lt;div className=&quot;grid grid-cols-1 md:grid-cols-4 gap-3&quot;&gt;&#10;                {/* Region Filter */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-xs font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Region&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.region}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;region&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 px-2 py-1.5 text-xs focus:ring-1 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;all&quot;&gt;All Regions&lt;/option&gt;&#10;                    {filterOptions.regions.map((region) =&gt; (&#10;                      &lt;option key={region} value={region}&gt;&#10;                        {region}&#10;                      &lt;/option&gt;&#10;                    ))}&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Category Filter */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-xs font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Category&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.category}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;category&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 px-2 py-1.5 text-xs focus:ring-1 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;all&quot;&gt;All Categories&lt;/option&gt;&#10;                    {filterOptions.categories.map((category) =&gt; (&#10;                      &lt;option key={category} value={category}&gt;&#10;                        {category}&#10;                      &lt;/option&gt;&#10;                    ))}&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Service Filter */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-xs font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Branding Service&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.service}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;service&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 px-2 py-1.5 text-xs focus:ring-1 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;all&quot;&gt;All Services&lt;/option&gt;&#10;                    {filterOptions.services.map((service) =&gt; (&#10;                      &lt;option key={service} value={service}&gt;&#10;                        {service}&#10;                      &lt;/option&gt;&#10;                    ))}&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Sort By */}&#10;                &lt;div&gt;&#10;                  &lt;label className=&quot;block text-xs font-medium text-gray-700 mb-1&quot;&gt;&#10;                    Sort By&#10;                  &lt;/label&gt;&#10;                  &lt;select&#10;                    value={filters.sortBy}&#10;                    onChange={(e) =&gt;&#10;                      handleFilterChange(&quot;sortBy&quot;, e.target.value)&#10;                    }&#10;                    className=&quot;w-full border border-gray-300 px-2 py-1.5 text-xs focus:ring-1 focus:ring-[#C9AF2F] focus:border-transparent&quot;&#10;                  &gt;&#10;                    &lt;option value=&quot;createdAt&quot;&gt;Newest First&lt;/option&gt;&#10;                    &lt;option value=&quot;name&quot;&gt;Name (A-Z)&lt;/option&gt;&#10;                    &lt;option value=&quot;yearEstablished&quot;&gt;Established Year&lt;/option&gt;&#10;                  &lt;/select&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Actions */}&#10;                &lt;div className=&quot;flex items-end gap-2&quot;&gt;&#10;                  &lt;button&#10;                    onClick={applyFilters}&#10;                    className=&quot;flex-1 bg-[#C9AF2F] hover:bg-[#B8A028] text-black py-1.5 px-3 text-xs transition-colors duration-200&quot;&#10;                  &gt;&#10;                    Apply&#10;                  &lt;/button&gt;&#10;                  &lt;button&#10;                    onClick={resetFilters}&#10;                    className=&quot;flex-1 bg-gray-200 hover:bg-gray-300 text-gray-700 py-1.5 px-3 text-xs transition-colors duration-200&quot;&#10;                  &gt;&#10;                    Reset&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Loading State */}&#10;        {loading ? (&#10;          &lt;div className=&quot;flex justify-center items-center py-10&quot;&gt;&#10;            &lt;div className=&quot;animate-spin h-6 w-6 border-b-2 border-[#C9AF2F]&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            {/* Stores Grid/List */}&#10;            {stores.length &gt; 0 ? (&#10;              &lt;div&#10;                className={&#10;                  viewMode === &quot;grid&quot;&#10;                    ? &quot;grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 mb-6&quot;&#10;                    : &quot;space-y-3 mb-6&quot;&#10;                }&#10;              &gt;&#10;                {stores.map((store) =&gt; (&#10;                  &lt;StoreCard&#10;                    key={store._id}&#10;                    store={store}&#10;                    viewMode={viewMode}&#10;                  /&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;text-center py-10 bg-white border border-gray-200 shadow-sm&quot;&gt;&#10;                &lt;Building2 className=&quot;w-12 h-12 text-gray-400 mx-auto mb-3&quot; /&gt;&#10;                &lt;h3 className=&quot;text-base font-medium text-gray-900 mb-1.5&quot;&gt;&#10;                  No suppliers found&#10;                &lt;/h3&gt;&#10;                &lt;p className=&quot;text-sm text-gray-600 mb-3&quot;&gt;&#10;                  Try adjusting your search criteria or filters&#10;                &lt;/p&gt;&#10;                &lt;button&#10;                  onClick={resetFilters}&#10;                  className=&quot;bg-[#C9AF2F] hover:bg-[#B8A028] text-black py-1.5 px-4 text-sm transition-colors duration-200&quot;&#10;                &gt;&#10;                  Clear all filters&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;&#10;            {/* Pagination */}&#10;            {pagination.totalPages &gt; 1 &amp;&amp; (&#10;              &lt;div className=&quot;flex justify-center items-center gap-1.5&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; handlePageChange(pagination.currentPage - 1)}&#10;                  disabled={!pagination.hasPrevPage}&#10;                  className=&quot;p-1.5 border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50&quot;&#10;                &gt;&#10;                  &lt;ChevronLeft className=&quot;w-4 h-4&quot; /&gt;&#10;                &lt;/button&gt;&#10;&#10;                {[...Array(pagination.totalPages)].map((_, index) =&gt; {&#10;                  const pageNum = index + 1;&#10;                  const isCurrentPage = pageNum === pagination.currentPage;&#10;&#10;                  // Show only a few pages around current page&#10;                  if (&#10;                    pageNum === 1 ||&#10;                    pageNum === pagination.totalPages ||&#10;                    (pageNum &gt;= pagination.currentPage - 2 &amp;&amp;&#10;                      pageNum &lt;= pagination.currentPage + 2)&#10;                  ) {&#10;                    return (&#10;                      &lt;button&#10;                        key={pageNum}&#10;                        onClick={() =&gt; handlePageChange(pageNum)}&#10;                        className={`px-2.5 py-1.5 border text-xs ${&#10;                          isCurrentPage&#10;                            ? &quot;bg-[#C9AF2F] text-white border-[#C9AF2F]&quot;&#10;                            : &quot;border-gray-300 hover:bg-gray-50&quot;&#10;                        }`}&#10;                      &gt;&#10;                        {pageNum}&#10;                      &lt;/button&gt;&#10;                    );&#10;                  } else if (&#10;                    pageNum === pagination.currentPage - 3 ||&#10;                    pageNum === pagination.currentPage + 3&#10;                  ) {&#10;                    return (&#10;                      &lt;span key={pageNum} className=&quot;px-1.5 text-xs&quot;&gt;&#10;                        ...&#10;                      &lt;/span&gt;&#10;                    );&#10;                  }&#10;                  return null;&#10;                })}&#10;&#10;                &lt;button&#10;                  onClick={() =&gt; handlePageChange(pagination.currentPage + 1)}&#10;                  disabled={!pagination.hasNextPage}&#10;                  className=&quot;p-1.5 border border-gray-300 disabled:opacity-50 disabled:cursor-not-allowed hover:bg-gray-50&quot;&#10;                &gt;&#10;                  &lt;ChevronRight className=&quot;w-4 h-4&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>